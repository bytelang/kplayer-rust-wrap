// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/msg/msg_output.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct MessageOutput {
    // message fields
    pub path: ::std::string::String,
    pub unique: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageOutput {
    fn default() -> &'a MessageOutput {
        <MessageOutput as ::protobuf::Message>::default_instance()
    }
}

impl MessageOutput {
    pub fn new() -> MessageOutput {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string unique = 2;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MessageOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unique);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.unique.is_empty() {
            os.write_string(2, &self.unique)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageOutput {
        MessageOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &MessageOutput| { &m.path },
                |m: &mut MessageOutput| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &MessageOutput| { &m.unique },
                |m: &mut MessageOutput| { &mut m.unique },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageOutput>(
                "MessageOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageOutput {
        static instance: ::protobuf::rt::LazyV2<MessageOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageOutput::new)
    }
}

impl ::protobuf::Clear for MessageOutput {
    fn clear(&mut self) {
        self.path.clear();
        self.unique.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageOutputAdd {
    // message fields
    pub output: ::protobuf::SingularPtrField<MessageOutput>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageOutputAdd {
    fn default() -> &'a EventMessageOutputAdd {
        <EventMessageOutputAdd as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageOutputAdd {
    pub fn new() -> EventMessageOutputAdd {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessageOutput output = 1;


    pub fn get_output(&self) -> &MessageOutput {
        self.output.as_ref().unwrap_or_else(|| <MessageOutput as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: MessageOutput) {
        self.output = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut MessageOutput {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> MessageOutput {
        self.output.take().unwrap_or_else(|| MessageOutput::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageOutputAdd {
    fn is_initialized(&self) -> bool {
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.output.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageOutputAdd {
        EventMessageOutputAdd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageOutput>>(
                "output",
                |m: &EventMessageOutputAdd| { &m.output },
                |m: &mut EventMessageOutputAdd| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageOutputAdd| { &m.error },
                |m: &mut EventMessageOutputAdd| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageOutputAdd>(
                "EventMessageOutputAdd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageOutputAdd {
        static instance: ::protobuf::rt::LazyV2<EventMessageOutputAdd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageOutputAdd::new)
    }
}

impl ::protobuf::Clear for EventMessageOutputAdd {
    fn clear(&mut self) {
        self.output.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageOutputAdd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageOutputAdd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageOutputRemove {
    // message fields
    pub output: ::protobuf::SingularPtrField<MessageOutput>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageOutputRemove {
    fn default() -> &'a EventMessageOutputRemove {
        <EventMessageOutputRemove as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageOutputRemove {
    pub fn new() -> EventMessageOutputRemove {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessageOutput output = 1;


    pub fn get_output(&self) -> &MessageOutput {
        self.output.as_ref().unwrap_or_else(|| <MessageOutput as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: MessageOutput) {
        self.output = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut MessageOutput {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> MessageOutput {
        self.output.take().unwrap_or_else(|| MessageOutput::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageOutputRemove {
    fn is_initialized(&self) -> bool {
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.output.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageOutputRemove {
        EventMessageOutputRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageOutput>>(
                "output",
                |m: &EventMessageOutputRemove| { &m.output },
                |m: &mut EventMessageOutputRemove| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageOutputRemove| { &m.error },
                |m: &mut EventMessageOutputRemove| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageOutputRemove>(
                "EventMessageOutputRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageOutputRemove {
        static instance: ::protobuf::rt::LazyV2<EventMessageOutputRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageOutputRemove::new)
    }
}

impl ::protobuf::Clear for EventMessageOutputRemove {
    fn clear(&mut self) {
        self.output.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageOutputRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageOutputRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageOutputList {
    // message fields
    pub outputs: ::protobuf::RepeatedField<MessageOutput>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageOutputList {
    fn default() -> &'a EventMessageOutputList {
        <EventMessageOutputList as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageOutputList {
    pub fn new() -> EventMessageOutputList {
        ::std::default::Default::default()
    }

    // repeated .KPProto.Msg.MessageOutput outputs = 1;


    pub fn get_outputs(&self) -> &[MessageOutput] {
        &self.outputs
    }
    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<MessageOutput>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<MessageOutput> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<MessageOutput> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageOutputList {
    fn is_initialized(&self) -> bool {
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.outputs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageOutputList {
        EventMessageOutputList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageOutput>>(
                "outputs",
                |m: &EventMessageOutputList| { &m.outputs },
                |m: &mut EventMessageOutputList| { &mut m.outputs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageOutputList| { &m.error },
                |m: &mut EventMessageOutputList| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageOutputList>(
                "EventMessageOutputList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageOutputList {
        static instance: ::protobuf::rt::LazyV2<EventMessageOutputList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageOutputList::new)
    }
}

impl ::protobuf::Clear for EventMessageOutputList {
    fn clear(&mut self) {
        self.outputs.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageOutputList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageOutputList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageOutputDisconnect {
    // message fields
    pub output: ::protobuf::SingularPtrField<MessageOutput>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageOutputDisconnect {
    fn default() -> &'a EventMessageOutputDisconnect {
        <EventMessageOutputDisconnect as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageOutputDisconnect {
    pub fn new() -> EventMessageOutputDisconnect {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessageOutput output = 1;


    pub fn get_output(&self) -> &MessageOutput {
        self.output.as_ref().unwrap_or_else(|| <MessageOutput as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: MessageOutput) {
        self.output = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut MessageOutput {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> MessageOutput {
        self.output.take().unwrap_or_else(|| MessageOutput::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageOutputDisconnect {
    fn is_initialized(&self) -> bool {
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.output.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageOutputDisconnect {
        EventMessageOutputDisconnect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageOutput>>(
                "output",
                |m: &EventMessageOutputDisconnect| { &m.output },
                |m: &mut EventMessageOutputDisconnect| { &mut m.output },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageOutputDisconnect| { &m.error },
                |m: &mut EventMessageOutputDisconnect| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageOutputDisconnect>(
                "EventMessageOutputDisconnect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageOutputDisconnect {
        static instance: ::protobuf::rt::LazyV2<EventMessageOutputDisconnect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageOutputDisconnect::new)
    }
}

impl ::protobuf::Clear for EventMessageOutputDisconnect {
    fn clear(&mut self) {
        self.output.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageOutputDisconnect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageOutputDisconnect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto/msg/msg_output.proto\x12\x0bKPProto.Msg\x1a\x14gogoproto/gog\
    o.proto\";\n\rMessageOutput\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04pat\
    h\x12\x16\n\x06unique\x18\x02\x20\x01(\tR\x06unique\"g\n\x15EventMessage\
    OutputAdd\x128\n\x06output\x18\x01\x20\x01(\x0b2\x1a.KPProto.Msg.Message\
    OutputR\x06outputB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\
    \x01(\tR\x05error\"j\n\x18EventMessageOutputRemove\x128\n\x06output\x18\
    \x01\x20\x01(\x0b2\x1a.KPProto.Msg.MessageOutputR\x06outputB\x04\xc8\xde\
    \x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05error\"j\n\x16EventMe\
    ssageOutputList\x12:\n\x07outputs\x18\x01\x20\x03(\x0b2\x1a.KPProto.Msg.\
    MessageOutputR\x07outputsB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\
    \x02\x20\x01(\tR\x05error\"n\n\x1cEventMessageOutputDisconnect\x128\n\
    \x06output\x18\x01\x20\x01(\x0b2\x1a.KPProto.Msg.MessageOutputR\x06outpu\
    tB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05errorB2\
    Z0github.com/bytelang/kplayer/types/core/proto/msgJ\xe4\x06\n\x06\x12\
    \x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x14\n\x08\n\x01\x08\x12\x03\x04\0G\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0G\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\n\n\x02\x04\0\x12\x04\x08\0\x0b\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\t\x08\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\t\x0f\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x08\x1a\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\n\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\
    \x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x18\x19\n\n\n\x02\x04\
    \x01\x12\x04\r\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x1d\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x0e\x08?\n\x0c\n\x05\x04\x01\x02\0\x06\x12\
    \x03\x0e\x08\x15\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\x16\x1c\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x1f\x20\n\x0c\n\x05\x04\x01\x02\0\
    \x08\x12\x03\x0e!>\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\x0e\
    \"=\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0f\x08\x19\n\x0c\n\x05\x04\x01\
    \x02\x01\x05\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\
    \x0f\x0f\x14\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0f\x17\x18\n\n\n\
    \x02\x04\x02\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\x12\x08\
    \x20\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x08?\n\x0c\n\x05\x04\x02\x02\
    \0\x06\x12\x03\x13\x08\x15\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\x16\
    \x1c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x1f\x20\n\x0c\n\x05\x04\
    \x02\x02\0\x08\x12\x03\x13!>\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\
    \x12\x03\x13\"=\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x14\x08\x19\n\x0c\n\
    \x05\x04\x02\x02\x01\x05\x12\x03\x14\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03\x14\x0f\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x14\x17\
    \x18\n\n\n\x02\x04\x03\x12\x04\x17\0\x1a\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x17\x08\x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x18\x08I\n\x0c\n\x05\
    \x04\x03\x02\0\x04\x12\x03\x18\x08\x10\n\x0c\n\x05\x04\x03\x02\0\x06\x12\
    \x03\x18\x11\x1e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x18\x1f&\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x18)*\n\x0c\n\x05\x04\x03\x02\0\x08\x12\
    \x03\x18+H\n\x0f\n\x08\x04\x03\x02\0\x08\xe9\xfb\x03\x12\x03\x18,G\n\x0b\
    \n\x04\x04\x03\x02\x01\x12\x03\x19\x08\x19\n\x0c\n\x05\x04\x03\x02\x01\
    \x05\x12\x03\x19\x08\x0e\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x19\x0f\
    \x14\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x19\x17\x18\n\n\n\x02\x04\
    \x04\x12\x04\x1c\0\x1f\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1c\x08$\n\x0b\
    \n\x04\x04\x04\x02\0\x12\x03\x1d\x08?\n\x0c\n\x05\x04\x04\x02\0\x06\x12\
    \x03\x1d\x08\x15\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x1d\x16\x1c\n\x0c\
    \n\x05\x04\x04\x02\0\x03\x12\x03\x1d\x1f\x20\n\x0c\n\x05\x04\x04\x02\0\
    \x08\x12\x03\x1d!>\n\x0f\n\x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03\x1d\
    \"=\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1e\x08\x19\n\x0c\n\x05\x04\x04\
    \x02\x01\x05\x12\x03\x1e\x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\
    \x1e\x0f\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1e\x17\x18b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
