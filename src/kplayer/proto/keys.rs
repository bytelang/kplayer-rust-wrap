// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/keys.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MessageResource {
    // message fields
    pub path: ::std::string::String,
    pub unique: ::std::string::String,
    pub seek: i64,
    pub end: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageResource {
    fn default() -> &'a MessageResource {
        <MessageResource as ::protobuf::Message>::default_instance()
    }
}

impl MessageResource {
    pub fn new() -> MessageResource {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string unique = 2;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }

    // int64 seek = 3;


    pub fn get_seek(&self) -> i64 {
        self.seek
    }
    pub fn clear_seek(&mut self) {
        self.seek = 0;
    }

    // Param is passed by value, moved
    pub fn set_seek(&mut self, v: i64) {
        self.seek = v;
    }

    // int64 end = 4;


    pub fn get_end(&self) -> i64 {
        self.end
    }
    pub fn clear_end(&mut self) {
        self.end = 0;
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: i64) {
        self.end = v;
    }
}

impl ::protobuf::Message for MessageResource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.seek = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unique);
        }
        if self.seek != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seek, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::value_size(4, self.end, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.unique.is_empty() {
            os.write_string(2, &self.unique)?;
        }
        if self.seek != 0 {
            os.write_int64(3, self.seek)?;
        }
        if self.end != 0 {
            os.write_int64(4, self.end)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageResource {
        MessageResource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &MessageResource| { &m.path },
                |m: &mut MessageResource| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &MessageResource| { &m.unique },
                |m: &mut MessageResource| { &mut m.unique },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "seek",
                |m: &MessageResource| { &m.seek },
                |m: &mut MessageResource| { &mut m.seek },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end",
                |m: &MessageResource| { &m.end },
                |m: &mut MessageResource| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageResource>(
                "MessageResource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageResource {
        static instance: ::protobuf::rt::LazyV2<MessageResource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageResource::new)
    }
}

impl ::protobuf::Clear for MessageResource {
    fn clear(&mut self) {
        self.path.clear();
        self.unique.clear();
        self.seek = 0;
        self.end = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageResource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageResource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PromptResource {
    // message fields
    pub path: ::std::string::String,
    pub unique: ::std::string::String,
    pub seek: i64,
    pub end: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PromptResource {
    fn default() -> &'a PromptResource {
        <PromptResource as ::protobuf::Message>::default_instance()
    }
}

impl PromptResource {
    pub fn new() -> PromptResource {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string unique = 2;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }

    // int64 seek = 3;


    pub fn get_seek(&self) -> i64 {
        self.seek
    }
    pub fn clear_seek(&mut self) {
        self.seek = 0;
    }

    // Param is passed by value, moved
    pub fn set_seek(&mut self, v: i64) {
        self.seek = v;
    }

    // int64 end = 4;


    pub fn get_end(&self) -> i64 {
        self.end
    }
    pub fn clear_end(&mut self) {
        self.end = 0;
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: i64) {
        self.end = v;
    }
}

impl ::protobuf::Message for PromptResource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.seek = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unique);
        }
        if self.seek != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seek, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::value_size(4, self.end, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.unique.is_empty() {
            os.write_string(2, &self.unique)?;
        }
        if self.seek != 0 {
            os.write_int64(3, self.seek)?;
        }
        if self.end != 0 {
            os.write_int64(4, self.end)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PromptResource {
        PromptResource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &PromptResource| { &m.path },
                |m: &mut PromptResource| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &PromptResource| { &m.unique },
                |m: &mut PromptResource| { &mut m.unique },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "seek",
                |m: &PromptResource| { &m.seek },
                |m: &mut PromptResource| { &mut m.seek },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end",
                |m: &PromptResource| { &m.end },
                |m: &mut PromptResource| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PromptResource>(
                "PromptResource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PromptResource {
        static instance: ::protobuf::rt::LazyV2<PromptResource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PromptResource::new)
    }
}

impl ::protobuf::Clear for PromptResource {
    fn clear(&mut self) {
        self.path.clear();
        self.unique.clear();
        self.seek = 0;
        self.end = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PromptResource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PromptResource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Information {
    // message fields
    pub cpp_std: ::std::string::String,
    pub tool_chains: ::std::string::String,
    pub build_chains: ::std::string::String,
    pub major_version: ::std::string::String,
    pub plugin_version: ::std::string::String,
    pub license_version: ::std::string::String,
    pub build_type: ::std::string::String,
    pub archive_version: ::std::string::String,
    pub copyright: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Information {
    fn default() -> &'a Information {
        <Information as ::protobuf::Message>::default_instance()
    }
}

impl Information {
    pub fn new() -> Information {
        ::std::default::Default::default()
    }

    // string cpp_std = 1;


    pub fn get_cpp_std(&self) -> &str {
        &self.cpp_std
    }
    pub fn clear_cpp_std(&mut self) {
        self.cpp_std.clear();
    }

    // Param is passed by value, moved
    pub fn set_cpp_std(&mut self, v: ::std::string::String) {
        self.cpp_std = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpp_std(&mut self) -> &mut ::std::string::String {
        &mut self.cpp_std
    }

    // Take field
    pub fn take_cpp_std(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cpp_std, ::std::string::String::new())
    }

    // string tool_chains = 2;


    pub fn get_tool_chains(&self) -> &str {
        &self.tool_chains
    }
    pub fn clear_tool_chains(&mut self) {
        self.tool_chains.clear();
    }

    // Param is passed by value, moved
    pub fn set_tool_chains(&mut self, v: ::std::string::String) {
        self.tool_chains = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_chains(&mut self) -> &mut ::std::string::String {
        &mut self.tool_chains
    }

    // Take field
    pub fn take_tool_chains(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tool_chains, ::std::string::String::new())
    }

    // string build_chains = 3;


    pub fn get_build_chains(&self) -> &str {
        &self.build_chains
    }
    pub fn clear_build_chains(&mut self) {
        self.build_chains.clear();
    }

    // Param is passed by value, moved
    pub fn set_build_chains(&mut self, v: ::std::string::String) {
        self.build_chains = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_build_chains(&mut self) -> &mut ::std::string::String {
        &mut self.build_chains
    }

    // Take field
    pub fn take_build_chains(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.build_chains, ::std::string::String::new())
    }

    // string major_version = 4;


    pub fn get_major_version(&self) -> &str {
        &self.major_version
    }
    pub fn clear_major_version(&mut self) {
        self.major_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_major_version(&mut self, v: ::std::string::String) {
        self.major_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_major_version(&mut self) -> &mut ::std::string::String {
        &mut self.major_version
    }

    // Take field
    pub fn take_major_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.major_version, ::std::string::String::new())
    }

    // string plugin_version = 5;


    pub fn get_plugin_version(&self) -> &str {
        &self.plugin_version
    }
    pub fn clear_plugin_version(&mut self) {
        self.plugin_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugin_version(&mut self, v: ::std::string::String) {
        self.plugin_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin_version(&mut self) -> &mut ::std::string::String {
        &mut self.plugin_version
    }

    // Take field
    pub fn take_plugin_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.plugin_version, ::std::string::String::new())
    }

    // string license_version = 6;


    pub fn get_license_version(&self) -> &str {
        &self.license_version
    }
    pub fn clear_license_version(&mut self) {
        self.license_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_license_version(&mut self, v: ::std::string::String) {
        self.license_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_license_version(&mut self) -> &mut ::std::string::String {
        &mut self.license_version
    }

    // Take field
    pub fn take_license_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.license_version, ::std::string::String::new())
    }

    // string build_type = 7;


    pub fn get_build_type(&self) -> &str {
        &self.build_type
    }
    pub fn clear_build_type(&mut self) {
        self.build_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_build_type(&mut self, v: ::std::string::String) {
        self.build_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_build_type(&mut self) -> &mut ::std::string::String {
        &mut self.build_type
    }

    // Take field
    pub fn take_build_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.build_type, ::std::string::String::new())
    }

    // string archive_version = 8;


    pub fn get_archive_version(&self) -> &str {
        &self.archive_version
    }
    pub fn clear_archive_version(&mut self) {
        self.archive_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_archive_version(&mut self, v: ::std::string::String) {
        self.archive_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_archive_version(&mut self) -> &mut ::std::string::String {
        &mut self.archive_version
    }

    // Take field
    pub fn take_archive_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.archive_version, ::std::string::String::new())
    }

    // string copyright = 9;


    pub fn get_copyright(&self) -> &str {
        &self.copyright
    }
    pub fn clear_copyright(&mut self) {
        self.copyright.clear();
    }

    // Param is passed by value, moved
    pub fn set_copyright(&mut self, v: ::std::string::String) {
        self.copyright = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_copyright(&mut self) -> &mut ::std::string::String {
        &mut self.copyright
    }

    // Take field
    pub fn take_copyright(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.copyright, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Information {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cpp_std)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tool_chains)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.build_chains)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.major_version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.plugin_version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.license_version)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.build_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.archive_version)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.copyright)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cpp_std.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cpp_std);
        }
        if !self.tool_chains.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tool_chains);
        }
        if !self.build_chains.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.build_chains);
        }
        if !self.major_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.major_version);
        }
        if !self.plugin_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.plugin_version);
        }
        if !self.license_version.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.license_version);
        }
        if !self.build_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.build_type);
        }
        if !self.archive_version.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.archive_version);
        }
        if !self.copyright.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.copyright);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cpp_std.is_empty() {
            os.write_string(1, &self.cpp_std)?;
        }
        if !self.tool_chains.is_empty() {
            os.write_string(2, &self.tool_chains)?;
        }
        if !self.build_chains.is_empty() {
            os.write_string(3, &self.build_chains)?;
        }
        if !self.major_version.is_empty() {
            os.write_string(4, &self.major_version)?;
        }
        if !self.plugin_version.is_empty() {
            os.write_string(5, &self.plugin_version)?;
        }
        if !self.license_version.is_empty() {
            os.write_string(6, &self.license_version)?;
        }
        if !self.build_type.is_empty() {
            os.write_string(7, &self.build_type)?;
        }
        if !self.archive_version.is_empty() {
            os.write_string(8, &self.archive_version)?;
        }
        if !self.copyright.is_empty() {
            os.write_string(9, &self.copyright)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Information {
        Information::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cpp_std",
                |m: &Information| { &m.cpp_std },
                |m: &mut Information| { &mut m.cpp_std },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tool_chains",
                |m: &Information| { &m.tool_chains },
                |m: &mut Information| { &mut m.tool_chains },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "build_chains",
                |m: &Information| { &m.build_chains },
                |m: &mut Information| { &mut m.build_chains },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "major_version",
                |m: &Information| { &m.major_version },
                |m: &mut Information| { &mut m.major_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "plugin_version",
                |m: &Information| { &m.plugin_version },
                |m: &mut Information| { &mut m.plugin_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "license_version",
                |m: &Information| { &m.license_version },
                |m: &mut Information| { &mut m.license_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "build_type",
                |m: &Information| { &m.build_type },
                |m: &mut Information| { &mut m.build_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "archive_version",
                |m: &Information| { &m.archive_version },
                |m: &mut Information| { &mut m.archive_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "copyright",
                |m: &Information| { &m.copyright },
                |m: &mut Information| { &mut m.copyright },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Information>(
                "Information",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Information {
        static instance: ::protobuf::rt::LazyV2<Information> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Information::new)
    }
}

impl ::protobuf::Clear for Information {
    fn clear(&mut self) {
        self.cpp_std.clear();
        self.tool_chains.clear();
        self.build_chains.clear();
        self.major_version.clear();
        self.plugin_version.clear();
        self.license_version.clear();
        self.build_type.clear();
        self.archive_version.clear();
        self.copyright.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Information {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Information {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventPromptAction {
    EVENT_PROMPT_ACTION_PLAYER_STOP = 0,
    EVENT_PROMPT_ACTION_PLAYER_PAUSE = 1,
    EVENT_PROMPT_ACTION_PLAYER_SKIP = 2,
    EVENT_PROMPT_ACTION_PLAYER_CONTINUE = 3,
    EVENT_PROMPT_ACTION_OUTPUT_ADD = 5,
    EVENT_PROMPT_ACTION_OUTPUT_REMOVE = 6,
    EVENT_PROMPT_ACTION_OUTPUT_LIST = 7,
    EVENT_PROMPT_ACTION_RESOURCE_ADD = 8,
    EVENT_PROMPT_ACTION_RESOURCE_REMOVE = 9,
    EVENT_PROMPT_ACTION_RESOURCE_LIST = 10,
    EVENT_PROMPT_ACTION_RESOURCE_CURRENT = 34,
    EVENT_PROMPT_ACTION_PLUGIN_ADD = 11,
    EVENT_PROMPT_ACTION_PLUGIN_REMOVE = 12,
    EVENT_PROMPT_ACTION_PLUGIN_LIST = 13,
    EVENT_PROMPT_ACTION_PLUGIN_UPDATE = 32,
}

impl ::protobuf::ProtobufEnum for EventPromptAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventPromptAction> {
        match value {
            0 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_STOP),
            1 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_PAUSE),
            2 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_SKIP),
            3 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_CONTINUE),
            5 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_ADD),
            6 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_REMOVE),
            7 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_LIST),
            8 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_ADD),
            9 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_REMOVE),
            10 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_LIST),
            34 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_CURRENT),
            11 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_ADD),
            12 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_REMOVE),
            13 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_LIST),
            32 => ::std::option::Option::Some(EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_UPDATE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventPromptAction] = &[
            EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_STOP,
            EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_PAUSE,
            EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_SKIP,
            EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_CONTINUE,
            EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_ADD,
            EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_REMOVE,
            EventPromptAction::EVENT_PROMPT_ACTION_OUTPUT_LIST,
            EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_ADD,
            EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_REMOVE,
            EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_LIST,
            EventPromptAction::EVENT_PROMPT_ACTION_RESOURCE_CURRENT,
            EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_ADD,
            EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_REMOVE,
            EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_LIST,
            EventPromptAction::EVENT_PROMPT_ACTION_PLUGIN_UPDATE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventPromptAction>("EventPromptAction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventPromptAction {
}

impl ::std::default::Default for EventPromptAction {
    fn default() -> Self {
        EventPromptAction::EVENT_PROMPT_ACTION_PLAYER_STOP
    }
}

impl ::protobuf::reflect::ProtobufValue for EventPromptAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventMessageAction {
    EVENT_MESSAGE_ACTION_PLAYER_STARTED = 0,
    EVENT_MESSAGE_ACTION_PLAYER_PAUSE = 1,
    EVENT_MESSAGE_ACTION_PLAYER_CONTINUE = 2,
    EVENT_MESSAGE_ACTION_PLAYER_SKIP = 3,
    EVENT_MESSAGE_ACTION_PLAYER_ENDED = 4,
    EVENT_MESSAGE_ACTION_RESOURCE_START = 5,
    EVENT_MESSAGE_ACTION_RESOURCE_FINISH = 6,
    EVENT_MESSAGE_ACTION_RESOURCE_EMPTY = 7,
    EVENT_MESSAGE_ACTION_RESOURCE_REMOVE = 8,
    EVENT_MESSAGE_ACTION_RESOURCE_ADD = 9,
    EVENT_MESSAGE_ACTION_RESOURCE_LIST = 10,
    EVENT_MESSAGE_ACTION_RESOURCE_CURRENT = 11,
    EVENT_MESSAGE_ACTION_RESOURCE_CHECKED = 20,
    EVENT_MESSAGE_ACTION_OUTPUT_ADD = 12,
    EVENT_MESSAGE_ACTION_OUTPUT_REMOVE = 13,
    EVENT_MESSAGE_ACTION_OUTPUT_LIST = 14,
    EVENT_MESSAGE_ACTION_OUTPUT_DISCONNECT = 15,
    EVENT_MESSAGE_ACTION_PLUGIN_ADD = 16,
    EVENT_MESSAGE_ACTION_PLUGIN_REMOVE = 17,
    EVENT_MESSAGE_ACTION_PLUGIN_LIST = 18,
    EVENT_MESSAGE_ACTION_PLUGIN_UPDATE = 19,
}

impl ::protobuf::ProtobufEnum for EventMessageAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventMessageAction> {
        match value {
            0 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_STARTED),
            1 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_PAUSE),
            2 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_CONTINUE),
            3 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_SKIP),
            4 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_ENDED),
            5 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_START),
            6 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_FINISH),
            7 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_EMPTY),
            8 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_REMOVE),
            9 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_ADD),
            10 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_LIST),
            11 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_CURRENT),
            20 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_CHECKED),
            12 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_ADD),
            13 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_REMOVE),
            14 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_LIST),
            15 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_DISCONNECT),
            16 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_ADD),
            17 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_REMOVE),
            18 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_LIST),
            19 => ::std::option::Option::Some(EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_UPDATE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventMessageAction] = &[
            EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_STARTED,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_PAUSE,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_CONTINUE,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_SKIP,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_ENDED,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_START,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_FINISH,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_EMPTY,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_REMOVE,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_ADD,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_LIST,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_CURRENT,
            EventMessageAction::EVENT_MESSAGE_ACTION_RESOURCE_CHECKED,
            EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_ADD,
            EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_REMOVE,
            EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_LIST,
            EventMessageAction::EVENT_MESSAGE_ACTION_OUTPUT_DISCONNECT,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_ADD,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_REMOVE,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_LIST,
            EventMessageAction::EVENT_MESSAGE_ACTION_PLUGIN_UPDATE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventMessageAction>("EventMessageAction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventMessageAction {
}

impl ::std::default::Default for EventMessageAction {
    fn default() -> Self {
        EventMessageAction::EVENT_MESSAGE_ACTION_PLAYER_STARTED
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10proto/keys.proto\x12\x07KPProto\x1a\x14gogoproto/gogo.proto\"c\n\
    \x0fMessageResource\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\
    \x16\n\x06unique\x18\x02\x20\x01(\tR\x06unique\x12\x12\n\x04seek\x18\x03\
    \x20\x01(\x03R\x04seek\x12\x10\n\x03end\x18\x04\x20\x01(\x03R\x03end\"b\
    \n\x0ePromptResource\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\
    \x16\n\x06unique\x18\x02\x20\x01(\tR\x06unique\x12\x12\n\x04seek\x18\x03\
    \x20\x01(\x03R\x04seek\x12\x10\n\x03end\x18\x04\x20\x01(\x03R\x03end\"\
    \xc5\x02\n\x0bInformation\x12\x17\n\x07cpp_std\x18\x01\x20\x01(\tR\x06cp\
    pStd\x12\x1f\n\x0btool_chains\x18\x02\x20\x01(\tR\ntoolChains\x12!\n\x0c\
    build_chains\x18\x03\x20\x01(\tR\x0bbuildChains\x12#\n\rmajor_version\
    \x18\x04\x20\x01(\tR\x0cmajorVersion\x12%\n\x0eplugin_version\x18\x05\
    \x20\x01(\tR\rpluginVersion\x12'\n\x0flicense_version\x18\x06\x20\x01(\t\
    R\x0elicenseVersion\x12\x1d\n\nbuild_type\x18\x07\x20\x01(\tR\tbuildType\
    \x12'\n\x0farchive_version\x18\x08\x20\x01(\tR\x0earchiveVersion\x12\x1c\
    \n\tcopyright\x18\t\x20\x01(\tR\tcopyright*\xd9\x04\n\x11EventPromptActi\
    on\x12#\n\x1fEVENT_PROMPT_ACTION_PLAYER_STOP\x10\0\x12$\n\x20EVENT_PROMP\
    T_ACTION_PLAYER_PAUSE\x10\x01\x12#\n\x1fEVENT_PROMPT_ACTION_PLAYER_SKIP\
    \x10\x02\x12'\n#EVENT_PROMPT_ACTION_PLAYER_CONTINUE\x10\x03\x12\"\n\x1eE\
    VENT_PROMPT_ACTION_OUTPUT_ADD\x10\x05\x12%\n!EVENT_PROMPT_ACTION_OUTPUT_\
    REMOVE\x10\x06\x12#\n\x1fEVENT_PROMPT_ACTION_OUTPUT_LIST\x10\x07\x12$\n\
    \x20EVENT_PROMPT_ACTION_RESOURCE_ADD\x10\x08\x12'\n#EVENT_PROMPT_ACTION_\
    RESOURCE_REMOVE\x10\t\x12%\n!EVENT_PROMPT_ACTION_RESOURCE_LIST\x10\n\x12\
    (\n$EVENT_PROMPT_ACTION_RESOURCE_CURRENT\x10\"\x12\"\n\x1eEVENT_PROMPT_A\
    CTION_PLUGIN_ADD\x10\x0b\x12%\n!EVENT_PROMPT_ACTION_PLUGIN_REMOVE\x10\
    \x0c\x12#\n\x1fEVENT_PROMPT_ACTION_PLUGIN_LIST\x10\r\x12%\n!EVENT_PROMPT\
    _ACTION_PLUGIN_UPDATE\x10\x20\x1a\x04\x88\xa3\x1e\0*\xe6\x06\n\x12EventM\
    essageAction\x12'\n#EVENT_MESSAGE_ACTION_PLAYER_STARTED\x10\0\x12%\n!EVE\
    NT_MESSAGE_ACTION_PLAYER_PAUSE\x10\x01\x12(\n$EVENT_MESSAGE_ACTION_PLAYE\
    R_CONTINUE\x10\x02\x12$\n\x20EVENT_MESSAGE_ACTION_PLAYER_SKIP\x10\x03\
    \x12%\n!EVENT_MESSAGE_ACTION_PLAYER_ENDED\x10\x04\x12'\n#EVENT_MESSAGE_A\
    CTION_RESOURCE_START\x10\x05\x12(\n$EVENT_MESSAGE_ACTION_RESOURCE_FINISH\
    \x10\x06\x12'\n#EVENT_MESSAGE_ACTION_RESOURCE_EMPTY\x10\x07\x12(\n$EVENT\
    _MESSAGE_ACTION_RESOURCE_REMOVE\x10\x08\x12%\n!EVENT_MESSAGE_ACTION_RESO\
    URCE_ADD\x10\t\x12&\n\"EVENT_MESSAGE_ACTION_RESOURCE_LIST\x10\n\x12)\n%E\
    VENT_MESSAGE_ACTION_RESOURCE_CURRENT\x10\x0b\x12)\n%EVENT_MESSAGE_ACTION\
    _RESOURCE_CHECKED\x10\x14\x12#\n\x1fEVENT_MESSAGE_ACTION_OUTPUT_ADD\x10\
    \x0c\x12&\n\"EVENT_MESSAGE_ACTION_OUTPUT_REMOVE\x10\r\x12$\n\x20EVENT_ME\
    SSAGE_ACTION_OUTPUT_LIST\x10\x0e\x12*\n&EVENT_MESSAGE_ACTION_OUTPUT_DISC\
    ONNECT\x10\x0f\x12#\n\x1fEVENT_MESSAGE_ACTION_PLUGIN_ADD\x10\x10\x12&\n\
    \"EVENT_MESSAGE_ACTION_PLUGIN_REMOVE\x10\x11\x12$\n\x20EVENT_MESSAGE_ACT\
    ION_PLUGIN_LIST\x10\x12\x12&\n\"EVENT_MESSAGE_ACTION_PLUGIN_UPDATE\x10\
    \x13\x1a\x04\x88\xa3\x1e\0B.Z,github.com/bytelang/kplayer/types/core/pro\
    toJ\xd2\x17\n\x06\x12\x04\0\0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x10\n\x08\n\x01\x08\x12\x03\x04\0C\n\t\n\x02\
    \x08\x0b\x12\x03\x04\0C\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\n\n\x02\x05\
    \0\x12\x04\x08\0&\x01\n\n\n\x03\x05\0\x01\x12\x03\x08\x05\x16\n\n\n\x03\
    \x05\0\x03\x12\x03\t\x087\n\r\n\x06\x05\0\x03\xb1\xe4\x03\x12\x03\t\x087\
    \n\x93\x01\n\x04\x05\0\x02\0\x12\x03\x11\x08,\x1a\x08\x20player\n2|\x20-\
    ---------------------------------\n\x20define\x20prompt\x20action\n\x20s\
    end\x20command\x20to\x20kplayer\x20core\n\x20---------------------------\
    -------\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x11\x08'\n\x0c\n\x05\x05\0\
    \x02\0\x02\x12\x03\x11*+\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x12\x08-\n\
    \x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x12\x08(\n\x0c\n\x05\x05\0\x02\x01\
    \x02\x12\x03\x12+,\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x13\x08,\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x13\x08'\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x13*+\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x14\x080\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x14\x08+\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x14./\n\x15\n\x04\x05\0\x02\x04\x12\x03\x17\x08+\x1a\x08\x20output\
    \n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x17\x08&\n\x0c\n\x05\x05\0\x02\
    \x04\x02\x12\x03\x17)*\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x18\x08.\n\x0c\
    \n\x05\x05\0\x02\x05\x01\x12\x03\x18\x08)\n\x0c\n\x05\x05\0\x02\x05\x02\
    \x12\x03\x18,-\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x19\x08,\n\x0c\n\x05\
    \x05\0\x02\x06\x01\x12\x03\x19\x08'\n\x0c\n\x05\x05\0\x02\x06\x02\x12\
    \x03\x19*+\n\x17\n\x04\x05\0\x02\x07\x12\x03\x1c\x08-\x1a\n\x20resource\
    \n\n\x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x1c\x08(\n\x0c\n\x05\x05\0\x02\
    \x07\x02\x12\x03\x1c+,\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x1d\x080\n\x0c\
    \n\x05\x05\0\x02\x08\x01\x12\x03\x1d\x08+\n\x0c\n\x05\x05\0\x02\x08\x02\
    \x12\x03\x1d./\n\x0b\n\x04\x05\0\x02\t\x12\x03\x1e\x08/\n\x0c\n\x05\x05\
    \0\x02\t\x01\x12\x03\x1e\x08)\n\x0c\n\x05\x05\0\x02\t\x02\x12\x03\x1e,.\
    \n\x0b\n\x04\x05\0\x02\n\x12\x03\x1f\x082\n\x0c\n\x05\x05\0\x02\n\x01\
    \x12\x03\x1f\x08,\n\x0c\n\x05\x05\0\x02\n\x02\x12\x03\x1f/1\n\x15\n\x04\
    \x05\0\x02\x0b\x12\x03\"\x08,\x1a\x08\x20plugin\n\n\x0c\n\x05\x05\0\x02\
    \x0b\x01\x12\x03\"\x08&\n\x0c\n\x05\x05\0\x02\x0b\x02\x12\x03\")+\n\x0b\
    \n\x04\x05\0\x02\x0c\x12\x03#\x08/\n\x0c\n\x05\x05\0\x02\x0c\x01\x12\x03\
    #\x08)\n\x0c\n\x05\x05\0\x02\x0c\x02\x12\x03#,.\n\x0b\n\x04\x05\0\x02\r\
    \x12\x03$\x08-\n\x0c\n\x05\x05\0\x02\r\x01\x12\x03$\x08'\n\x0c\n\x05\x05\
    \0\x02\r\x02\x12\x03$*,\n\x0b\n\x04\x05\0\x02\x0e\x12\x03%\x08/\n\x0c\n\
    \x05\x05\0\x02\x0e\x01\x12\x03%\x08)\n\x0c\n\x05\x05\0\x02\x0e\x02\x12\
    \x03%,.\n\n\n\x02\x05\x01\x12\x04(\0K\x01\n\n\n\x03\x05\x01\x01\x12\x03(\
    \x05\x17\n\n\n\x03\x05\x01\x03\x12\x03)\x087\n\x9b\x01\n\x06\x05\x01\x03\
    \xb1\xe4\x03\x12\x03)\x087\"\x8b\x01\x20--------------------------------\
    --\n\x20define\x20message\x20action\n\x20broadcast\x20message\x20action\
    \x20from\x20kplayer\x20core\n\x20----------------------------------\n\n\
    \x15\n\x04\x05\x01\x02\0\x12\x030\x080\x1a\x08\x20player\n\n\x0c\n\x05\
    \x05\x01\x02\0\x01\x12\x030\x08+\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x030.\
    /\n\x0b\n\x04\x05\x01\x02\x01\x12\x031\x08.\n\x0c\n\x05\x05\x01\x02\x01\
    \x01\x12\x031\x08)\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x031,-\n\x0b\n\
    \x04\x05\x01\x02\x02\x12\x032\x081\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\
    \x032\x08,\n\x0c\n\x05\x05\x01\x02\x02\x02\x12\x032/0\n\x0b\n\x04\x05\
    \x01\x02\x03\x12\x033\x08-\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x033\x08(\
    \n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x033+,\n\x0b\n\x04\x05\x01\x02\x04\
    \x12\x034\x08.\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x034\x08)\n\x0c\n\x05\
    \x05\x01\x02\x04\x02\x12\x034,-\n\x17\n\x04\x05\x01\x02\x05\x12\x037\x08\
    0\x1a\n\x20resource\n\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x037\x08+\n\
    \x0c\n\x05\x05\x01\x02\x05\x02\x12\x037./\n\x0b\n\x04\x05\x01\x02\x06\
    \x12\x038\x081\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x038\x08,\n\x0c\n\x05\
    \x05\x01\x02\x06\x02\x12\x038/0\n\x0b\n\x04\x05\x01\x02\x07\x12\x039\x08\
    0\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\x039\x08+\n\x0c\n\x05\x05\x01\x02\
    \x07\x02\x12\x039./\n\x0b\n\x04\x05\x01\x02\x08\x12\x03:\x081\n\x0c\n\
    \x05\x05\x01\x02\x08\x01\x12\x03:\x08,\n\x0c\n\x05\x05\x01\x02\x08\x02\
    \x12\x03:/0\n\x0b\n\x04\x05\x01\x02\t\x12\x03;\x08.\n\x0c\n\x05\x05\x01\
    \x02\t\x01\x12\x03;\x08)\n\x0c\n\x05\x05\x01\x02\t\x02\x12\x03;,-\n\x0b\
    \n\x04\x05\x01\x02\n\x12\x03<\x080\n\x0c\n\x05\x05\x01\x02\n\x01\x12\x03\
    <\x08*\n\x0c\n\x05\x05\x01\x02\n\x02\x12\x03<-/\n\x0b\n\x04\x05\x01\x02\
    \x0b\x12\x03=\x083\n\x0c\n\x05\x05\x01\x02\x0b\x01\x12\x03=\x08-\n\x0c\n\
    \x05\x05\x01\x02\x0b\x02\x12\x03=02\n\x0b\n\x04\x05\x01\x02\x0c\x12\x03>\
    \x083\n\x0c\n\x05\x05\x01\x02\x0c\x01\x12\x03>\x08-\n\x0c\n\x05\x05\x01\
    \x02\x0c\x02\x12\x03>02\n\x15\n\x04\x05\x01\x02\r\x12\x03A\x08-\x1a\x08\
    \x20output\n\n\x0c\n\x05\x05\x01\x02\r\x01\x12\x03A\x08'\n\x0c\n\x05\x05\
    \x01\x02\r\x02\x12\x03A*,\n\x0b\n\x04\x05\x01\x02\x0e\x12\x03B\x080\n\
    \x0c\n\x05\x05\x01\x02\x0e\x01\x12\x03B\x08*\n\x0c\n\x05\x05\x01\x02\x0e\
    \x02\x12\x03B-/\n\x0b\n\x04\x05\x01\x02\x0f\x12\x03C\x08.\n\x0c\n\x05\
    \x05\x01\x02\x0f\x01\x12\x03C\x08(\n\x0c\n\x05\x05\x01\x02\x0f\x02\x12\
    \x03C+-\n\x0b\n\x04\x05\x01\x02\x10\x12\x03D\x084\n\x0c\n\x05\x05\x01\
    \x02\x10\x01\x12\x03D\x08.\n\x0c\n\x05\x05\x01\x02\x10\x02\x12\x03D13\n\
    \x15\n\x04\x05\x01\x02\x11\x12\x03G\x08-\x1a\x08\x20plugin\n\n\x0c\n\x05\
    \x05\x01\x02\x11\x01\x12\x03G\x08'\n\x0c\n\x05\x05\x01\x02\x11\x02\x12\
    \x03G*,\n\x0b\n\x04\x05\x01\x02\x12\x12\x03H\x080\n\x0c\n\x05\x05\x01\
    \x02\x12\x01\x12\x03H\x08*\n\x0c\n\x05\x05\x01\x02\x12\x02\x12\x03H-/\n\
    \x0b\n\x04\x05\x01\x02\x13\x12\x03I\x08.\n\x0c\n\x05\x05\x01\x02\x13\x01\
    \x12\x03I\x08(\n\x0c\n\x05\x05\x01\x02\x13\x02\x12\x03I+-\n\x0b\n\x04\
    \x05\x01\x02\x14\x12\x03J\x080\n\x0c\n\x05\x05\x01\x02\x14\x01\x12\x03J\
    \x08*\n\x0c\n\x05\x05\x01\x02\x14\x02\x12\x03J-/\n\x16\n\x02\x04\0\x12\
    \x04N\0S\x01\x1a\n\x20resource\n\n\n\n\x03\x04\0\x01\x12\x03N\x08\x17\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03O\x08\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03O\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03O\x0f\x13\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03O\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03P\x08\
    \x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03P\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03P\x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03P\x18\
    \x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03Q\x02\x11\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03Q\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03Q\x08\x0c\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03Q\x0f\x10\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03R\x02\x10\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03R\x02\x07\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03R\x08\x0b\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03R\x0e\x0f\n\n\n\x02\x04\x01\x12\x04T\0Y\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03T\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03U\x08\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03U\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03U\x0f\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03U\x16\x17\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03V\x08\x1a\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x03V\x08\x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03V\x0f\x15\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03V\x18\x19\n\x0b\n\x04\x04\x01\x02\
    \x02\x12\x03W\x08\x17\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03W\x08\r\n\
    \x0c\n\x05\x04\x01\x02\x02\x01\x12\x03W\x0e\x12\n\x0c\n\x05\x04\x01\x02\
    \x02\x03\x12\x03W\x15\x16\n\x0b\n\x04\x04\x01\x02\x03\x12\x03X\x08\x16\n\
    \x0c\n\x05\x04\x01\x02\x03\x05\x12\x03X\x08\r\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x03X\x0e\x11\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03X\x14\
    \x15\n\x19\n\x02\x04\x02\x12\x04\\\0f\x01\x1a\r\x20information\n\n\n\n\
    \x03\x04\x02\x01\x12\x03\\\x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\x03]\
    \x08\x1b\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03]\x08\x0e\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03]\x0f\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03]\
    \x19\x1a\n\x0b\n\x04\x04\x02\x02\x01\x12\x03^\x08\x1f\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03^\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03^\x0f\x1a\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03^\x1d\x1e\n\x0b\n\
    \x04\x04\x02\x02\x02\x12\x03_\x08\x20\n\x0c\n\x05\x04\x02\x02\x02\x05\
    \x12\x03_\x08\x0e\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03_\x0f\x1b\n\x0c\
    \n\x05\x04\x02\x02\x02\x03\x12\x03_\x1e\x1f\n\x0b\n\x04\x04\x02\x02\x03\
    \x12\x03`\x08!\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03`\x08\x0e\n\x0c\n\
    \x05\x04\x02\x02\x03\x01\x12\x03`\x0f\x1c\n\x0c\n\x05\x04\x02\x02\x03\
    \x03\x12\x03`\x1f\x20\n\x0b\n\x04\x04\x02\x02\x04\x12\x03a\x08\"\n\x0c\n\
    \x05\x04\x02\x02\x04\x05\x12\x03a\x08\x0e\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03a\x0f\x1d\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03a\x20!\n\
    \x0b\n\x04\x04\x02\x02\x05\x12\x03b\x08#\n\x0c\n\x05\x04\x02\x02\x05\x05\
    \x12\x03b\x08\x0e\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03b\x0f\x1e\n\x0c\
    \n\x05\x04\x02\x02\x05\x03\x12\x03b!\"\n\x0b\n\x04\x04\x02\x02\x06\x12\
    \x03c\x08\x1e\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03c\x08\x0e\n\x0c\n\
    \x05\x04\x02\x02\x06\x01\x12\x03c\x0f\x19\n\x0c\n\x05\x04\x02\x02\x06\
    \x03\x12\x03c\x1c\x1d\n\x0b\n\x04\x04\x02\x02\x07\x12\x03d\x08#\n\x0c\n\
    \x05\x04\x02\x02\x07\x05\x12\x03d\x08\x0e\n\x0c\n\x05\x04\x02\x02\x07\
    \x01\x12\x03d\x0f\x1e\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03d!\"\n\x0b\
    \n\x04\x04\x02\x02\x08\x12\x03e\x08\x1d\n\x0c\n\x05\x04\x02\x02\x08\x05\
    \x12\x03e\x08\x0e\n\x0c\n\x05\x04\x02\x02\x08\x01\x12\x03e\x0f\x18\n\x0c\
    \n\x05\x04\x02\x02\x08\x03\x12\x03e\x1b\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
