// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/msg/msg_plugin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MessagePlugin {
    // message fields
    pub path: ::std::string::String,
    pub unique: ::std::string::String,
    pub params: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessagePlugin {
    fn default() -> &'a MessagePlugin {
        <MessagePlugin as ::protobuf::Message>::default_instance()
    }
}

impl MessagePlugin {
    pub fn new() -> MessagePlugin {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string unique = 2;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }

    // repeated .KPProto.Msg.MessagePlugin.ParamsEntry params = 4;


    pub fn get_params(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.params
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.params = v;
    }

    // Mutable pointer to the field.
    pub fn mut_params(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.params
    }

    // Take field
    pub fn take_params(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.params, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for MessagePlugin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unique);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.params);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.unique.is_empty() {
            os.write_string(2, &self.unique)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.params, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessagePlugin {
        MessagePlugin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &MessagePlugin| { &m.path },
                |m: &mut MessagePlugin| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &MessagePlugin| { &m.unique },
                |m: &mut MessagePlugin| { &mut m.unique },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "params",
                |m: &MessagePlugin| { &m.params },
                |m: &mut MessagePlugin| { &mut m.params },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessagePlugin>(
                "MessagePlugin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessagePlugin {
        static instance: ::protobuf::rt::LazyV2<MessagePlugin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessagePlugin::new)
    }
}

impl ::protobuf::Clear for MessagePlugin {
    fn clear(&mut self) {
        self.path.clear();
        self.unique.clear();
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessagePlugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessagePlugin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessagePluginAdd {
    // message fields
    pub plugin: ::protobuf::SingularPtrField<MessagePlugin>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessagePluginAdd {
    fn default() -> &'a EventMessagePluginAdd {
        <EventMessagePluginAdd as ::protobuf::Message>::default_instance()
    }
}

impl EventMessagePluginAdd {
    pub fn new() -> EventMessagePluginAdd {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessagePlugin plugin = 1;


    pub fn get_plugin(&self) -> &MessagePlugin {
        self.plugin.as_ref().unwrap_or_else(|| <MessagePlugin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_plugin(&mut self) {
        self.plugin.clear();
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: MessagePlugin) {
        self.plugin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut MessagePlugin {
        if self.plugin.is_none() {
            self.plugin.set_default();
        }
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> MessagePlugin {
        self.plugin.take().unwrap_or_else(|| MessagePlugin::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessagePluginAdd {
    fn is_initialized(&self) -> bool {
        for v in &self.plugin {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plugin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.plugin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.plugin.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessagePluginAdd {
        EventMessagePluginAdd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessagePlugin>>(
                "plugin",
                |m: &EventMessagePluginAdd| { &m.plugin },
                |m: &mut EventMessagePluginAdd| { &mut m.plugin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessagePluginAdd| { &m.error },
                |m: &mut EventMessagePluginAdd| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessagePluginAdd>(
                "EventMessagePluginAdd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessagePluginAdd {
        static instance: ::protobuf::rt::LazyV2<EventMessagePluginAdd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessagePluginAdd::new)
    }
}

impl ::protobuf::Clear for EventMessagePluginAdd {
    fn clear(&mut self) {
        self.plugin.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessagePluginAdd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessagePluginAdd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessagePluginRemove {
    // message fields
    pub plugin: ::protobuf::SingularPtrField<MessagePlugin>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessagePluginRemove {
    fn default() -> &'a EventMessagePluginRemove {
        <EventMessagePluginRemove as ::protobuf::Message>::default_instance()
    }
}

impl EventMessagePluginRemove {
    pub fn new() -> EventMessagePluginRemove {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessagePlugin plugin = 1;


    pub fn get_plugin(&self) -> &MessagePlugin {
        self.plugin.as_ref().unwrap_or_else(|| <MessagePlugin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_plugin(&mut self) {
        self.plugin.clear();
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: MessagePlugin) {
        self.plugin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut MessagePlugin {
        if self.plugin.is_none() {
            self.plugin.set_default();
        }
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> MessagePlugin {
        self.plugin.take().unwrap_or_else(|| MessagePlugin::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessagePluginRemove {
    fn is_initialized(&self) -> bool {
        for v in &self.plugin {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plugin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.plugin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.plugin.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessagePluginRemove {
        EventMessagePluginRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessagePlugin>>(
                "plugin",
                |m: &EventMessagePluginRemove| { &m.plugin },
                |m: &mut EventMessagePluginRemove| { &mut m.plugin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessagePluginRemove| { &m.error },
                |m: &mut EventMessagePluginRemove| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessagePluginRemove>(
                "EventMessagePluginRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessagePluginRemove {
        static instance: ::protobuf::rt::LazyV2<EventMessagePluginRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessagePluginRemove::new)
    }
}

impl ::protobuf::Clear for EventMessagePluginRemove {
    fn clear(&mut self) {
        self.plugin.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessagePluginRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessagePluginRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessagePluginList {
    // message fields
    pub plugins: ::protobuf::RepeatedField<MessagePlugin>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessagePluginList {
    fn default() -> &'a EventMessagePluginList {
        <EventMessagePluginList as ::protobuf::Message>::default_instance()
    }
}

impl EventMessagePluginList {
    pub fn new() -> EventMessagePluginList {
        ::std::default::Default::default()
    }

    // repeated .KPProto.Msg.MessagePlugin plugins = 1;


    pub fn get_plugins(&self) -> &[MessagePlugin] {
        &self.plugins
    }
    pub fn clear_plugins(&mut self) {
        self.plugins.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugins(&mut self, v: ::protobuf::RepeatedField<MessagePlugin>) {
        self.plugins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plugins(&mut self) -> &mut ::protobuf::RepeatedField<MessagePlugin> {
        &mut self.plugins
    }

    // Take field
    pub fn take_plugins(&mut self) -> ::protobuf::RepeatedField<MessagePlugin> {
        ::std::mem::replace(&mut self.plugins, ::protobuf::RepeatedField::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessagePluginList {
    fn is_initialized(&self) -> bool {
        for v in &self.plugins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plugins)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.plugins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.plugins {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessagePluginList {
        EventMessagePluginList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessagePlugin>>(
                "plugins",
                |m: &EventMessagePluginList| { &m.plugins },
                |m: &mut EventMessagePluginList| { &mut m.plugins },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessagePluginList| { &m.error },
                |m: &mut EventMessagePluginList| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessagePluginList>(
                "EventMessagePluginList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessagePluginList {
        static instance: ::protobuf::rt::LazyV2<EventMessagePluginList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessagePluginList::new)
    }
}

impl ::protobuf::Clear for EventMessagePluginList {
    fn clear(&mut self) {
        self.plugins.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessagePluginList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessagePluginList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessagePluginUpdate {
    // message fields
    pub plugin: ::protobuf::SingularPtrField<MessagePlugin>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessagePluginUpdate {
    fn default() -> &'a EventMessagePluginUpdate {
        <EventMessagePluginUpdate as ::protobuf::Message>::default_instance()
    }
}

impl EventMessagePluginUpdate {
    pub fn new() -> EventMessagePluginUpdate {
        ::std::default::Default::default()
    }

    // .KPProto.Msg.MessagePlugin plugin = 1;


    pub fn get_plugin(&self) -> &MessagePlugin {
        self.plugin.as_ref().unwrap_or_else(|| <MessagePlugin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_plugin(&mut self) {
        self.plugin.clear();
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: MessagePlugin) {
        self.plugin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut MessagePlugin {
        if self.plugin.is_none() {
            self.plugin.set_default();
        }
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> MessagePlugin {
        self.plugin.take().unwrap_or_else(|| MessagePlugin::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessagePluginUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.plugin {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plugin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.plugin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.plugin.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessagePluginUpdate {
        EventMessagePluginUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessagePlugin>>(
                "plugin",
                |m: &EventMessagePluginUpdate| { &m.plugin },
                |m: &mut EventMessagePluginUpdate| { &mut m.plugin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessagePluginUpdate| { &m.error },
                |m: &mut EventMessagePluginUpdate| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessagePluginUpdate>(
                "EventMessagePluginUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessagePluginUpdate {
        static instance: ::protobuf::rt::LazyV2<EventMessagePluginUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessagePluginUpdate::new)
    }
}

impl ::protobuf::Clear for EventMessagePluginUpdate {
    fn clear(&mut self) {
        self.plugin.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessagePluginUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessagePluginUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aproto/msg/msg_plugin.proto\x12\x0bKPProto.Msg\x1a\x14gogoproto/gog\
    o.proto\"\xb6\x01\n\rMessagePlugin\x12\x12\n\x04path\x18\x01\x20\x01(\tR\
    \x04path\x12\x16\n\x06unique\x18\x02\x20\x01(\tR\x06unique\x12>\n\x06par\
    ams\x18\x04\x20\x03(\x0b2&.KPProto.Msg.MessagePlugin.ParamsEntryR\x06par\
    ams\x1a9\n\x0bParamsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"g\n\x15Event\
    MessagePluginAdd\x128\n\x06plugin\x18\x01\x20\x01(\x0b2\x1a.KPProto.Msg.\
    MessagePluginR\x06pluginB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\
    \x20\x01(\tR\x05error\"j\n\x18EventMessagePluginRemove\x128\n\x06plugin\
    \x18\x01\x20\x01(\x0b2\x1a.KPProto.Msg.MessagePluginR\x06pluginB\x04\xc8\
    \xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05error\"j\n\x16Eve\
    ntMessagePluginList\x12:\n\x07plugins\x18\x01\x20\x03(\x0b2\x1a.KPProto.\
    Msg.MessagePluginR\x07pluginsB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\
    \x18\x02\x20\x01(\tR\x05error\"j\n\x18EventMessagePluginUpdate\x128\n\
    \x06plugin\x18\x01\x20\x01(\x0b2\x1a.KPProto.Msg.MessagePluginR\x06plugi\
    nB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05errorB2\
    Z0github.com/bytelang/kplayer/types/core/proto/msgJ\x9b\x07\n\x06\x12\
    \x04\0\0\x20\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x14\n\x08\n\x01\x08\x12\x03\x04\0G\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0G\n\t\n\x02\x03\0\x12\x03\x06\0\x1e\n\n\n\x02\x04\0\x12\x04\x08\0\x0c\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x15\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\t\x08\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x08\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\t\x0f\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x08\x1a\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\n\x08\x0e\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\
    \x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x18\x19\n\x0b\n\x04\x04\
    \0\x02\x02\x12\x03\x0b\x08'\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x0b\
    \x08\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\x1c\"\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03\x0b%&\n\n\n\x02\x04\x01\x12\x04\x0e\0\x11\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x0e\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0f\x08?\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x0f\x08\x15\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x0f\x16\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x0f\x1f\x20\n\x0c\n\x05\x04\x01\x02\0\x08\x12\x03\x0f!>\n\x0f\n\x08\
    \x04\x01\x02\0\x08\xe9\xfb\x03\x12\x03\x0f\"=\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x10\x08\x19\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x10\x08\
    \x0e\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x10\x0f\x14\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03\x10\x17\x18\n\n\n\x02\x04\x02\x12\x04\x13\0\x16\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x13\x08\x20\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x14\x08?\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x14\x08\x15\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x14\x16\x1c\n\x0c\n\x05\x04\x02\x02\
    \0\x03\x12\x03\x14\x1f\x20\n\x0c\n\x05\x04\x02\x02\0\x08\x12\x03\x14!>\n\
    \x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\x14\"=\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x15\x08\x19\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x15\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x15\x0f\x14\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x15\x17\x18\n\n\n\x02\x04\x03\x12\x04\
    \x18\0\x1b\x01\n\n\n\x03\x04\x03\x01\x12\x03\x18\x08\x1e\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x19\x08I\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03\x19\
    \x08\x10\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x19\x11\x1e\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x19\x1f&\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x19)*\n\x0c\n\x05\x04\x03\x02\0\x08\x12\x03\x19+H\n\x0f\n\x08\x04\
    \x03\x02\0\x08\xe9\xfb\x03\x12\x03\x19,G\n\x0b\n\x04\x04\x03\x02\x01\x12\
    \x03\x1a\x08\x19\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1a\x08\x0e\n\
    \x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1a\x0f\x14\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x03\x1a\x17\x18\n\n\n\x02\x04\x04\x12\x04\x1d\0\x20\x01\
    \n\n\n\x03\x04\x04\x01\x12\x03\x1d\x08\x20\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03\x1e\x08?\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1e\x08\x15\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03\x1e\x16\x1c\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x1e\x1f\x20\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03\x1e!>\n\x0f\n\
    \x08\x04\x04\x02\0\x08\xe9\xfb\x03\x12\x03\x1e\"=\n\x0b\n\x04\x04\x04\
    \x02\x01\x12\x03\x1f\x08\x19\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1f\
    \x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1f\x0f\x14\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x03\x1f\x17\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
