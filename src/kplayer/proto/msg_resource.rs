// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/msg/msg_resource.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceStart {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceStart {
    fn default() -> &'a EventMessageResourceStart {
        <EventMessageResourceStart as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceStart {
    pub fn new() -> EventMessageResourceStart {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceStart {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceStart {
        EventMessageResourceStart::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceStart| { &m.resource },
                |m: &mut EventMessageResourceStart| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceStart| { &m.error },
                |m: &mut EventMessageResourceStart| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceStart>(
                "EventMessageResourceStart",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceStart {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceStart> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceStart::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceStart {
    fn clear(&mut self) {
        self.resource.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceStart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceStart {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceChecked {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub duration: u64,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceChecked {
    fn default() -> &'a EventMessageResourceChecked {
        <EventMessageResourceChecked as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceChecked {
    pub fn new() -> EventMessageResourceChecked {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // uint64 duration = 2;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u64) {
        self.duration = v;
    }

    // string error = 3;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceChecked {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(2, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.duration != 0 {
            os.write_uint64(2, self.duration)?;
        }
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceChecked {
        EventMessageResourceChecked::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceChecked| { &m.resource },
                |m: &mut EventMessageResourceChecked| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration",
                |m: &EventMessageResourceChecked| { &m.duration },
                |m: &mut EventMessageResourceChecked| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceChecked| { &m.error },
                |m: &mut EventMessageResourceChecked| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceChecked>(
                "EventMessageResourceChecked",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceChecked {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceChecked> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceChecked::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceChecked {
    fn clear(&mut self) {
        self.resource.clear();
        self.duration = 0;
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceChecked {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceChecked {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceFinish {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceFinish {
    fn default() -> &'a EventMessageResourceFinish {
        <EventMessageResourceFinish as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceFinish {
    pub fn new() -> EventMessageResourceFinish {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceFinish {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceFinish {
        EventMessageResourceFinish::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceFinish| { &m.resource },
                |m: &mut EventMessageResourceFinish| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceFinish| { &m.error },
                |m: &mut EventMessageResourceFinish| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceFinish>(
                "EventMessageResourceFinish",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceFinish {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceFinish> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceFinish::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceFinish {
    fn clear(&mut self) {
        self.resource.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceFinish {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceFinish {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceEmpty {
    // message fields
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceEmpty {
    fn default() -> &'a EventMessageResourceEmpty {
        <EventMessageResourceEmpty as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceEmpty {
    pub fn new() -> EventMessageResourceEmpty {
        ::std::default::Default::default()
    }

    // string error = 3;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceEmpty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.error.is_empty() {
            os.write_string(3, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceEmpty {
        EventMessageResourceEmpty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceEmpty| { &m.error },
                |m: &mut EventMessageResourceEmpty| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceEmpty>(
                "EventMessageResourceEmpty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceEmpty {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceEmpty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceEmpty::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceEmpty {
    fn clear(&mut self) {
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceEmpty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceEmpty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceAdd {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceAdd {
    fn default() -> &'a EventMessageResourceAdd {
        <EventMessageResourceAdd as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceAdd {
    pub fn new() -> EventMessageResourceAdd {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceAdd {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceAdd {
        EventMessageResourceAdd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceAdd| { &m.resource },
                |m: &mut EventMessageResourceAdd| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceAdd| { &m.error },
                |m: &mut EventMessageResourceAdd| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceAdd>(
                "EventMessageResourceAdd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceAdd {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceAdd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceAdd::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceAdd {
    fn clear(&mut self) {
        self.resource.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceAdd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceAdd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceRemove {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceRemove {
    fn default() -> &'a EventMessageResourceRemove {
        <EventMessageResourceRemove as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceRemove {
    pub fn new() -> EventMessageResourceRemove {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceRemove {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceRemove {
        EventMessageResourceRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceRemove| { &m.resource },
                |m: &mut EventMessageResourceRemove| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceRemove| { &m.error },
                |m: &mut EventMessageResourceRemove| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceRemove>(
                "EventMessageResourceRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceRemove {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceRemove::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceRemove {
    fn clear(&mut self) {
        self.resource.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceList {
    // message fields
    pub resources: ::protobuf::RepeatedField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceList {
    fn default() -> &'a EventMessageResourceList {
        <EventMessageResourceList as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceList {
    pub fn new() -> EventMessageResourceList {
        ::std::default::Default::default()
    }

    // repeated .KPProto.MessageResource resources = 1;


    pub fn get_resources(&self) -> &[super::keys::MessageResource] {
        &self.resources
    }
    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::protobuf::RepeatedField<super::keys::MessageResource>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::protobuf::RepeatedField<super::keys::MessageResource> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::protobuf::RepeatedField<super::keys::MessageResource> {
        ::std::mem::replace(&mut self.resources, ::protobuf::RepeatedField::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceList {
    fn is_initialized(&self) -> bool {
        for v in &self.resources {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resources)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resources {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceList {
        EventMessageResourceList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resources",
                |m: &EventMessageResourceList| { &m.resources },
                |m: &mut EventMessageResourceList| { &mut m.resources },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceList| { &m.error },
                |m: &mut EventMessageResourceList| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceList>(
                "EventMessageResourceList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceList {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceList::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceList {
    fn clear(&mut self) {
        self.resources.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceHistory {
    // message fields
    pub resources: ::protobuf::RepeatedField<super::keys::MessageResource>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceHistory {
    fn default() -> &'a EventMessageResourceHistory {
        <EventMessageResourceHistory as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceHistory {
    pub fn new() -> EventMessageResourceHistory {
        ::std::default::Default::default()
    }

    // repeated .KPProto.MessageResource resources = 1;


    pub fn get_resources(&self) -> &[super::keys::MessageResource] {
        &self.resources
    }
    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::protobuf::RepeatedField<super::keys::MessageResource>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::protobuf::RepeatedField<super::keys::MessageResource> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::protobuf::RepeatedField<super::keys::MessageResource> {
        ::std::mem::replace(&mut self.resources, ::protobuf::RepeatedField::new())
    }

    // string error = 2;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventMessageResourceHistory {
    fn is_initialized(&self) -> bool {
        for v in &self.resources {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resources)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.resources {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.error.is_empty() {
            os.write_string(2, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceHistory {
        EventMessageResourceHistory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resources",
                |m: &EventMessageResourceHistory| { &m.resources },
                |m: &mut EventMessageResourceHistory| { &mut m.resources },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceHistory| { &m.error },
                |m: &mut EventMessageResourceHistory| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceHistory>(
                "EventMessageResourceHistory",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceHistory {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceHistory> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceHistory::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceHistory {
    fn clear(&mut self) {
        self.resources.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceHistory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceHistory {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventMessageResourceCurrent {
    // message fields
    pub resource: ::protobuf::SingularPtrField<super::keys::MessageResource>,
    pub duration: u64,
    pub seek: i64,
    pub error: ::std::string::String,
    pub hit_cache: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventMessageResourceCurrent {
    fn default() -> &'a EventMessageResourceCurrent {
        <EventMessageResourceCurrent as ::protobuf::Message>::default_instance()
    }
}

impl EventMessageResourceCurrent {
    pub fn new() -> EventMessageResourceCurrent {
        ::std::default::Default::default()
    }

    // .KPProto.MessageResource resource = 1;


    pub fn get_resource(&self) -> &super::keys::MessageResource {
        self.resource.as_ref().unwrap_or_else(|| <super::keys::MessageResource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: super::keys::MessageResource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut super::keys::MessageResource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> super::keys::MessageResource {
        self.resource.take().unwrap_or_else(|| super::keys::MessageResource::new())
    }

    // uint64 duration = 2;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u64) {
        self.duration = v;
    }

    // int64 seek = 3;


    pub fn get_seek(&self) -> i64 {
        self.seek
    }
    pub fn clear_seek(&mut self) {
        self.seek = 0;
    }

    // Param is passed by value, moved
    pub fn set_seek(&mut self, v: i64) {
        self.seek = v;
    }

    // string error = 4;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    // bool hit_cache = 5;


    pub fn get_hit_cache(&self) -> bool {
        self.hit_cache
    }
    pub fn clear_hit_cache(&mut self) {
        self.hit_cache = false;
    }

    // Param is passed by value, moved
    pub fn set_hit_cache(&mut self, v: bool) {
        self.hit_cache = v;
    }
}

impl ::protobuf::Message for EventMessageResourceCurrent {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.seek = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.hit_cache = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(2, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seek != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seek, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.error);
        }
        if self.hit_cache != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.duration != 0 {
            os.write_uint64(2, self.duration)?;
        }
        if self.seek != 0 {
            os.write_int64(3, self.seek)?;
        }
        if !self.error.is_empty() {
            os.write_string(4, &self.error)?;
        }
        if self.hit_cache != false {
            os.write_bool(5, self.hit_cache)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventMessageResourceCurrent {
        EventMessageResourceCurrent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::MessageResource>>(
                "resource",
                |m: &EventMessageResourceCurrent| { &m.resource },
                |m: &mut EventMessageResourceCurrent| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration",
                |m: &EventMessageResourceCurrent| { &m.duration },
                |m: &mut EventMessageResourceCurrent| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "seek",
                |m: &EventMessageResourceCurrent| { &m.seek },
                |m: &mut EventMessageResourceCurrent| { &mut m.seek },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &EventMessageResourceCurrent| { &m.error },
                |m: &mut EventMessageResourceCurrent| { &mut m.error },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "hit_cache",
                |m: &EventMessageResourceCurrent| { &m.hit_cache },
                |m: &mut EventMessageResourceCurrent| { &mut m.hit_cache },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventMessageResourceCurrent>(
                "EventMessageResourceCurrent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventMessageResourceCurrent {
        static instance: ::protobuf::rt::LazyV2<EventMessageResourceCurrent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventMessageResourceCurrent::new)
    }
}

impl ::protobuf::Clear for EventMessageResourceCurrent {
    fn clear(&mut self) {
        self.resource.clear();
        self.duration = 0;
        self.seek = 0;
        self.error.clear();
        self.hit_cache = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventMessageResourceCurrent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventMessageResourceCurrent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cproto/msg/msg_resource.proto\x12\x0bKPProto.Msg\x1a\x10proto/keys.\
    proto\x1a\x14gogoproto/gogo.proto\"m\n\x19EventMessageResourceStart\x12:\
    \n\x08resource\x18\x01\x20\x01(\x0b2\x18.KPProto.MessageResourceR\x08res\
    ourceB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05err\
    or\"\x8b\x01\n\x1bEventMessageResourceChecked\x12:\n\x08resource\x18\x01\
    \x20\x01(\x0b2\x18.KPProto.MessageResourceR\x08resourceB\x04\xc8\xde\x1f\
    \x01\x12\x1a\n\x08duration\x18\x02\x20\x01(\x04R\x08duration\x12\x14\n\
    \x05error\x18\x03\x20\x01(\tR\x05error\"n\n\x1aEventMessageResourceFinis\
    h\x12:\n\x08resource\x18\x01\x20\x01(\x0b2\x18.KPProto.MessageResourceR\
    \x08resourceB\x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\
    \x05error\"1\n\x19EventMessageResourceEmpty\x12\x14\n\x05error\x18\x03\
    \x20\x01(\tR\x05error\"k\n\x17EventMessageResourceAdd\x12:\n\x08resource\
    \x18\x01\x20\x01(\x0b2\x18.KPProto.MessageResourceR\x08resourceB\x04\xc8\
    \xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05error\"n\n\x1aEve\
    ntMessageResourceRemove\x12:\n\x08resource\x18\x01\x20\x01(\x0b2\x18.KPP\
    roto.MessageResourceR\x08resourceB\x04\xc8\xde\x1f\x01\x12\x14\n\x05erro\
    r\x18\x02\x20\x01(\tR\x05error\"n\n\x18EventMessageResourceList\x12<\n\t\
    resources\x18\x01\x20\x03(\x0b2\x18.KPProto.MessageResourceR\tresourcesB\
    \x04\xc8\xde\x1f\x01\x12\x14\n\x05error\x18\x02\x20\x01(\tR\x05error\"k\
    \n\x1bEventMessageResourceHistory\x126\n\tresources\x18\x01\x20\x03(\x0b\
    2\x18.KPProto.MessageResourceR\tresources\x12\x14\n\x05error\x18\x02\x20\
    \x01(\tR\x05error\"\xb6\x01\n\x1bEventMessageResourceCurrent\x124\n\x08r\
    esource\x18\x01\x20\x01(\x0b2\x18.KPProto.MessageResourceR\x08resource\
    \x12\x1a\n\x08duration\x18\x02\x20\x01(\x04R\x08duration\x12\x12\n\x04se\
    ek\x18\x03\x20\x01(\x03R\x04seek\x12\x14\n\x05error\x18\x04\x20\x01(\tR\
    \x05error\x12\x1b\n\thit_cache\x18\x05\x20\x01(\x08R\x08hitCacheB2Z0gith\
    ub.com/bytelang/kplayer/types/core/proto/msgJ\x9b\x0f\n\x06\x12\x04\0\0?\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x14\n\
    \x08\n\x01\x08\x12\x03\x04\0G\n\t\n\x02\x08\x0b\x12\x03\x04\0G\n\t\n\x02\
    \x03\0\x12\x03\x06\0\x1a\n\t\n\x02\x03\x01\x12\x03\x07\0\x1e\n,\n\x02\
    \x04\0\x12\x04\n\0\r\x01\x1a\x20\x20message\x20resource\x20start\x20play\
    ing\n\n\n\n\x03\x04\0\x01\x12\x03\n\x08!\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x0b\x08C\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\x08\x17\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x0b\x18\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x0b#$\n\x0c\n\x05\x04\0\x02\0\x08\x12\x03\x0b%B\n\x0f\n\x08\x04\0\x02\0\
    \x08\xe9\xfb\x03\x12\x03\x0b&A\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0c\x08\
    \x19\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0c\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x0c\x0f\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0c\x17\x18\n\n\n\x02\x04\x01\x12\x04\x0f\0\x13\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\x0f\x08#\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x08C\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x10\x08\x17\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x10\x18\x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10#$\n\x0c\n\
    \x05\x04\x01\x02\0\x08\x12\x03\x10%B\n\x0f\n\x08\x04\x01\x02\0\x08\xe9\
    \xfb\x03\x12\x03\x10&A\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x11\x08\x1d\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03\x11\x0f\x17\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x11\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x12\x08\x19\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x12\x08\x0e\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x12\x0f\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x12\x17\x18\
    \n,\n\x02\x04\x02\x12\x04\x16\0\x19\x01\x1a\x20\x20message\x20resource\
    \x20play\x20finished\n\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\"\n\x0b\n\
    \x04\x04\x02\x02\0\x12\x03\x17\x08C\n\x0c\n\x05\x04\x02\x02\0\x06\x12\
    \x03\x17\x08\x17\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x17\x18\x20\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03\x17#$\n\x0c\n\x05\x04\x02\x02\0\x08\x12\
    \x03\x17%B\n\x0f\n\x08\x04\x02\x02\0\x08\xe9\xfb\x03\x12\x03\x17&A\n\x0b\
    \n\x04\x04\x02\x02\x01\x12\x03\x18\x08\x19\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03\x18\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x18\x0f\
    \x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x17\x18\n:\n\x02\x04\
    \x03\x12\x04\x1c\0\x1e\x01\x1a.\x20message\x20resource\x20empty\x20wait\
    \x20for\x20new\x20resource\n\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08!\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x1d\x08\x19\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x1d\x08\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\x0f\
    \x14\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1d\x17\x18\n.\n\x02\x04\x04\
    \x12\x04!\0$\x01\x1a\"\x20message\x20resource\x20had\x20success\x20add\n\
    \n\n\n\x03\x04\x04\x01\x12\x03!\x08\x1f\n\x0b\n\x04\x04\x04\x02\0\x12\
    \x03\"\x08C\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\"\x08\x17\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\"\x18\x20\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\"#$\n\x0c\n\x05\x04\x04\x02\0\x08\x12\x03\"%B\n\x0f\n\x08\x04\x04\
    \x02\0\x08\xe9\xfb\x03\x12\x03\"&A\n\x0b\n\x04\x04\x04\x02\x01\x12\x03#\
    \x08\x19\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03#\x08\x0e\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03#\x0f\x14\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03#\x17\x18\n1\n\x02\x04\x05\x12\x04'\0*\x01\x1a%\x20message\x20re\
    source\x20had\x20success\x20remove\n\n\n\n\x03\x04\x05\x01\x12\x03'\x08\
    \"\n\x0b\n\x04\x04\x05\x02\0\x12\x03(\x08C\n\x0c\n\x05\x04\x05\x02\0\x06\
    \x12\x03(\x08\x17\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03(\x18\x20\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x03(#$\n\x0c\n\x05\x04\x05\x02\0\x08\x12\x03(\
    %B\n\x0f\n\x08\x04\x05\x02\0\x08\xe9\xfb\x03\x12\x03(&A\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03)\x08\x19\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03)\
    \x08\x0e\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03)\x0f\x14\n\x0c\n\x05\
    \x04\x05\x02\x01\x03\x12\x03)\x17\x18\n)\n\x02\x04\x06\x12\x04-\00\x01\
    \x1a\x1d\x20message\x20current\x20no\x20playlist\n\n\n\n\x03\x04\x06\x01\
    \x12\x03-\x08\x20\n\x0b\n\x04\x04\x06\x02\0\x12\x03.\x08M\n\x0c\n\x05\
    \x04\x06\x02\0\x04\x12\x03.\x08\x10\n\x0c\n\x05\x04\x06\x02\0\x06\x12\
    \x03.\x11\x20\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03.!*\n\x0c\n\x05\x04\
    \x06\x02\0\x03\x12\x03.-.\n\x0c\n\x05\x04\x06\x02\0\x08\x12\x03./L\n\x0f\
    \n\x08\x04\x06\x02\0\x08\xe9\xfb\x03\x12\x03.0K\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03/\x08\x19\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03/\x08\x0e\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03/\x0f\x14\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03/\x17\x18\n+\n\x02\x04\x07\x12\x043\06\x01\x1a\x1f\x20me\
    ssage\x20play\x20history\x20playlist\n\n\n\n\x03\x04\x07\x01\x12\x033\
    \x08#\n\x0b\n\x04\x04\x07\x02\0\x12\x034\x08/\n\x0c\n\x05\x04\x07\x02\0\
    \x04\x12\x034\x08\x10\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x034\x11\x20\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x034!*\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x034-.\n\x0b\n\x04\x04\x07\x02\x01\x12\x035\x08\x19\n\x0c\n\x05\x04\
    \x07\x02\x01\x05\x12\x035\x08\x0e\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\
    \x035\x0f\x14\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x035\x17\x18\n.\n\x02\
    \x04\x08\x12\x049\0?\x01\x1a\"\x20message\x20current\x20playing\x20resou\
    rce\n\n\n\n\x03\x04\x08\x01\x12\x039\x08#\n\x0b\n\x04\x04\x08\x02\0\x12\
    \x03:\x02\x1f\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03:\x02\x11\n\x0c\n\x05\
    \x04\x08\x02\0\x01\x12\x03:\x12\x1a\n\x0c\n\x05\x04\x08\x02\0\x03\x12\
    \x03:\x1d\x1e\n\x0b\n\x04\x04\x08\x02\x01\x12\x03;\x02\x16\n\x0c\n\x05\
    \x04\x08\x02\x01\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x08\x02\x01\x01\
    \x12\x03;\t\x11\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03;\x14\x15\n\x0b\n\
    \x04\x04\x08\x02\x02\x12\x03<\x02\x11\n\x0c\n\x05\x04\x08\x02\x02\x05\
    \x12\x03<\x02\x07\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03<\x08\x0c\n\x0c\
    \n\x05\x04\x08\x02\x02\x03\x12\x03<\x0f\x10\n\x0b\n\x04\x04\x08\x02\x03\
    \x12\x03=\x02\x13\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03=\x02\x08\n\x0c\
    \n\x05\x04\x08\x02\x03\x01\x12\x03=\t\x0e\n\x0c\n\x05\x04\x08\x02\x03\
    \x03\x12\x03=\x11\x12\n\x0b\n\x04\x04\x08\x02\x04\x12\x03>\x02\x15\n\x0c\
    \n\x05\x04\x08\x02\x04\x05\x12\x03>\x02\x06\n\x0c\n\x05\x04\x08\x02\x04\
    \x01\x12\x03>\x07\x10\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03>\x13\x14b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
