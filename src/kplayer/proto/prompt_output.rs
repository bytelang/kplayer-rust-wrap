// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/prompt/prompt_output.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct PromptOutput {
    // message fields
    pub path: ::std::string::String,
    pub unique: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PromptOutput {
    fn default() -> &'a PromptOutput {
        <PromptOutput as ::protobuf::Message>::default_instance()
    }
}

impl PromptOutput {
    pub fn new() -> PromptOutput {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string unique = 2;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PromptOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unique);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.unique.is_empty() {
            os.write_string(2, &self.unique)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PromptOutput {
        PromptOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &PromptOutput| { &m.path },
                |m: &mut PromptOutput| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &PromptOutput| { &m.unique },
                |m: &mut PromptOutput| { &mut m.unique },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PromptOutput>(
                "PromptOutput",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PromptOutput {
        static instance: ::protobuf::rt::LazyV2<PromptOutput> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PromptOutput::new)
    }
}

impl ::protobuf::Clear for PromptOutput {
    fn clear(&mut self) {
        self.path.clear();
        self.unique.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PromptOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PromptOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventPromptOutputAdd {
    // message fields
    pub output: ::protobuf::SingularPtrField<PromptOutput>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventPromptOutputAdd {
    fn default() -> &'a EventPromptOutputAdd {
        <EventPromptOutputAdd as ::protobuf::Message>::default_instance()
    }
}

impl EventPromptOutputAdd {
    pub fn new() -> EventPromptOutputAdd {
        ::std::default::Default::default()
    }

    // .KPProto.Prompt.PromptOutput output = 1;


    pub fn get_output(&self) -> &PromptOutput {
        self.output.as_ref().unwrap_or_else(|| <PromptOutput as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: PromptOutput) {
        self.output = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut PromptOutput {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> PromptOutput {
        self.output.take().unwrap_or_else(|| PromptOutput::new())
    }
}

impl ::protobuf::Message for EventPromptOutputAdd {
    fn is_initialized(&self) -> bool {
        for v in &self.output {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.output.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.output.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventPromptOutputAdd {
        EventPromptOutputAdd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PromptOutput>>(
                "output",
                |m: &EventPromptOutputAdd| { &m.output },
                |m: &mut EventPromptOutputAdd| { &mut m.output },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventPromptOutputAdd>(
                "EventPromptOutputAdd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventPromptOutputAdd {
        static instance: ::protobuf::rt::LazyV2<EventPromptOutputAdd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventPromptOutputAdd::new)
    }
}

impl ::protobuf::Clear for EventPromptOutputAdd {
    fn clear(&mut self) {
        self.output.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventPromptOutputAdd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventPromptOutputAdd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventPromptOutputRemove {
    // message fields
    pub unique: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventPromptOutputRemove {
    fn default() -> &'a EventPromptOutputRemove {
        <EventPromptOutputRemove as ::protobuf::Message>::default_instance()
    }
}

impl EventPromptOutputRemove {
    pub fn new() -> EventPromptOutputRemove {
        ::std::default::Default::default()
    }

    // string unique = 1;


    pub fn get_unique(&self) -> &str {
        &self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique.clear();
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: ::std::string::String) {
        self.unique = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unique(&mut self) -> &mut ::std::string::String {
        &mut self.unique
    }

    // Take field
    pub fn take_unique(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unique, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventPromptOutputRemove {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unique)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.unique.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.unique);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.unique.is_empty() {
            os.write_string(1, &self.unique)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventPromptOutputRemove {
        EventPromptOutputRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "unique",
                |m: &EventPromptOutputRemove| { &m.unique },
                |m: &mut EventPromptOutputRemove| { &mut m.unique },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventPromptOutputRemove>(
                "EventPromptOutputRemove",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventPromptOutputRemove {
        static instance: ::protobuf::rt::LazyV2<EventPromptOutputRemove> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventPromptOutputRemove::new)
    }
}

impl ::protobuf::Clear for EventPromptOutputRemove {
    fn clear(&mut self) {
        self.unique.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventPromptOutputRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventPromptOutputRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventPromptOutputList {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventPromptOutputList {
    fn default() -> &'a EventPromptOutputList {
        <EventPromptOutputList as ::protobuf::Message>::default_instance()
    }
}

impl EventPromptOutputList {
    pub fn new() -> EventPromptOutputList {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EventPromptOutputList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventPromptOutputList {
        EventPromptOutputList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventPromptOutputList>(
                "EventPromptOutputList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventPromptOutputList {
        static instance: ::protobuf::rt::LazyV2<EventPromptOutputList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventPromptOutputList::new)
    }
}

impl ::protobuf::Clear for EventPromptOutputList {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventPromptOutputList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventPromptOutputList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20proto/prompt/prompt_output.proto\x12\x0eKPProto.Prompt\":\n\x0cPro\
    mptOutput\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\x16\n\x06uni\
    que\x18\x02\x20\x01(\tR\x06unique\"L\n\x14EventPromptOutputAdd\x124\n\
    \x06output\x18\x01\x20\x01(\x0b2\x1c.KPProto.Prompt.PromptOutputR\x06out\
    put\"1\n\x17EventPromptOutputRemove\x12\x16\n\x06unique\x18\x01\x20\x01(\
    \tR\x06unique\"\x17\n\x15EventPromptOutputListB5Z3github.com/bytelang/kp\
    layer/types/core/proto/promptJ\xf7\x02\n\x06\x12\x04\0\0\x15\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x17\n\x08\n\x01\
    \x08\x12\x03\x04\0J\n\t\n\x02\x08\x0b\x12\x03\x04\0J\n\x14\n\x02\x04\0\
    \x12\x04\x07\0\n\x01\x1a\x08\x20output\n\n\n\n\x03\x04\0\x01\x12\x03\x07\
    \x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x02\x12\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x08\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x08\t\
    \r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x10\x11\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\t\x02\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\t\x02\x08\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\t\x0f\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\t\x12\x13\n\n\n\x02\x04\x01\x12\x04\x0c\0\x0e\x01\n\n\n\x03\
    \x04\x01\x01\x12\x03\x0c\x08\x1c\n\x0b\n\x04\x04\x01\x02\0\x12\x03\r\x02\
    \x1a\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\r\x02\x0e\n\x0c\n\x05\x04\x01\
    \x02\0\x01\x12\x03\r\x0f\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\r\x18\
    \x19\n\n\n\x02\x04\x02\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x10\x08\x1f\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x11\x02\x14\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x11\t\x0f\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x11\x12\x13\n\n\
    \n\x02\x04\x03\x12\x04\x14\0\x15\x01\n\n\n\x03\x04\x03\x01\x12\x03\x14\
    \x08\x1db\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
